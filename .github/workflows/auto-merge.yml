name: Auto-Merge Dependabot PRs (Patch & Minor Dev)

on:
  pull_request_target:
    types:
      - opened
      - labeled
      - synchronize

jobs:
  auto-merge:
    if: github.actor == 'dependabot[bot]'
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # --- Versionslogik aus dem Titel ---
      - name: Extract version change type
        id: version
        run: |
          TITLE="${{ github.event.pull_request.title }}"
          echo "::group::Parsing SemVer from PR title"
          echo "PR title: $TITLE"

          if [[ "$TITLE" =~ [Bb]ump[[:space:]]+[^[:space:]]+[[:space:]]+from[[:space:]]+([0-9]+\.[0-9]+\.[0-9]+)[[:space:]]+to[[:space:]]+([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            OLD="${BASH_REMATCH[1]}"
            NEW="${BASH_REMATCH[2]}"
            echo "Old version: $OLD"
            echo "New version: $NEW"

            OLD_MAJOR=$(echo $OLD | cut -d. -f1)
            OLD_MINOR=$(echo $OLD | cut -d. -f2)
            NEW_MAJOR=$(echo $NEW | cut -d. -f1)
            NEW_MINOR=$(echo $NEW | cut -d. -f2)

            if [[ "$OLD_MAJOR" == "$NEW_MAJOR" && "$OLD_MINOR" == "$NEW_MINOR" ]]; then
              echo "version_change=patch" >> $GITHUB_OUTPUT
            elif [[ "$OLD_MAJOR" == "$NEW_MAJOR" ]]; then
              echo "version_change=minor" >> $GITHUB_OUTPUT
            else
              echo "version_change=major" >> $GITHUB_OUTPUT
            fi
          else
            echo "version_change=unknown" >> $GITHUB_OUTPUT
          fi
          echo "::endgroup::"

      # --- DevDependency-Erkennung aus dem PR-Titel ---
      - name: Check if PR targets a devDependency
        id: devcheck
        run: |
          TITLE="${{ github.event.pull_request.title }}"
          if echo "$TITLE" | grep -iq "deps-dev"; then
            echo "is_dev_dependency=true" >> $GITHUB_OUTPUT
          else
            echo "is_dev_dependency=false" >> $GITHUB_OUTPUT
          fi
          
      # --- Set labels (SemVer immer, DevDependency nur wenn zutreffend) ---
      - name: Add labels based on SemVer and dependency type
        env:
          GH_TOKEN: ${{ secrets.AUTO_MERGE_TOKEN }}
          IS_DEV_DEP: ${{ steps.devcheck.outputs.is_dev_dependency }}
          VERSION_CHANGE: ${{ steps.version.outputs.version_change }}
        run: |
          NUMBER=${{ github.event.pull_request.number }}
          LABEL_ARGS=()

          # Nur DevDependency bekommt ein Label
          if [[ "$IS_DEV_DEP" == "true" ]]; then
            LABEL_ARGS+=(--add-label "dev-dependency")
          fi

          # SemVer-Label immer hinzuf√ºgen
          case "$VERSION_CHANGE" in
            patch) LABEL_ARGS+=(--add-label "patch") ;;
            minor) LABEL_ARGS+=(--add-label "minor") ;;
            major) LABEL_ARGS+=(--add-label "major") ;;
          esac

          echo "Adding labels: ${LABEL_ARGS[*]}"
          gh pr edit "$NUMBER" "${LABEL_ARGS[@]}"

      # --- Merge-Schritt ---
      - name: Enable Auto-Merge if patch or minor devDependency
        if: steps.version.outputs.version_change == 'patch' || 
            (steps.version.outputs.version_change == 'minor' && steps.devcheck.outputs.is_dev_dependency == 'true')
        env:
          GH_TOKEN: ${{ secrets.AUTO_MERGE_TOKEN }}
        run: |
          echo "::group::Activating auto-merge"
          echo "Version type: ${{ steps.version.outputs.version_change }}"
          echo "DevDependency: ${{ steps.devcheck.outputs.is_dev_dependency }}"
          echo "PR #${{ github.event.pull_request.number }} will be merged."
          gh pr merge "${{ github.event.pull_request.number }}" --auto --merge --delete-branch
          echo "::endgroup::"
